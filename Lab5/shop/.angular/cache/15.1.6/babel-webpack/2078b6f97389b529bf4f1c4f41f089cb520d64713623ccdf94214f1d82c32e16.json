{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i2 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/clipboard';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, of, BehaviorSubject, Subject, EMPTY } from 'rxjs';\nimport { tap, delay, take, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\nconst SHARE_BUTTONS_CONFIG = new InjectionToken('shareButtonsConfig');\nclass IShareButton {}\nvar SharerMethod;\n(function (SharerMethod) {\n  SharerMethod[\"Anchor\"] = \"anchor\";\n  SharerMethod[\"Window\"] = \"window\";\n})(SharerMethod || (SharerMethod = {}));\n\n/**\r\n * Simple object check.\r\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\r\n * Deep merge two objects.\r\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n}\n/** Returns a valid URL or falls back to current URL */\nfunction getValidUrl(url, fallbackUrl) {\n  if (url) {\n    const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    if (r.test(url)) {\n      return url;\n    }\n    console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\n  }\n  return fallbackUrl;\n}\nfunction printPage() {\n  return new Observable(sub => document.defaultView.print());\n}\nfunction copyToClipboard({\n  params,\n  data,\n  clipboard,\n  updater\n}) {\n  return of(null).pipe(tap(() => {\n    clipboard.copy(params.url);\n    // Disable copy button\n    updater.next({\n      icon: data.successIcon,\n      text: data.successText,\n      disabled: true\n    });\n  }), delay(data.delay), tap(() => updater.next({\n    icon: data.icon,\n    text: data.text,\n    disabled: false\n  })), take(1));\n}\n\n// Create message body that includes the sharing link used for Email, SMS and WhatsApp buttons\nconst linkInDescription = {\n  description: p => {\n    return p.description ? `${p.description}\\r\\n${p.url}` : p.url;\n  }\n};\nconst SHARE_BUTTONS = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    ariaLabel: 'Share on Facebook',\n    icon: ['fab', 'facebook-f'],\n    color: '#4267B2',\n    share: {\n      desktop: 'https://www.facebook.com/sharer/sharer.php?'\n    },\n    params: {\n      url: 'u'\n    }\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    ariaLabel: 'Share on Twitter',\n    icon: ['fab', 'twitter'],\n    color: '#00acee',\n    share: {\n      desktop: 'https://twitter.com/intent/tweet?'\n    },\n    params: {\n      url: 'url',\n      description: 'text',\n      tags: 'hashtags',\n      via: 'via'\n    }\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    ariaLabel: 'Share on LinkedIn',\n    icon: ['fab', 'linkedin-in'],\n    color: '#006fa6',\n    share: {\n      desktop: 'https://www.linkedin.com/shareArticle?'\n    },\n    params: {\n      url: 'url',\n      title: 'title',\n      description: 'summary'\n    }\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    ariaLabel: 'Share on Pinterest',\n    icon: ['fab', 'pinterest-p'],\n    color: '#BD091D',\n    share: {\n      desktop: 'https://pinterest.com/pin/create/button/?'\n    },\n    params: {\n      url: 'url',\n      description: 'description',\n      image: 'media'\n    }\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    ariaLabel: 'Share on Reddit',\n    icon: ['fab', 'reddit-alien'],\n    color: '#FF4006',\n    share: {\n      desktop: 'https://www.reddit.com/submit?'\n    },\n    params: {\n      url: 'url',\n      title: 'title'\n    }\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    ariaLabel: 'Share on Tumblr',\n    icon: ['fab', 'tumblr'],\n    color: '#36465D',\n    share: {\n      desktop: 'https://tumblr.com/widgets/share/tool?'\n    },\n    params: {\n      url: 'canonicalUrl',\n      description: 'caption',\n      tags: 'tags'\n    }\n  },\n  mix: {\n    type: 'mix',\n    text: 'Mix',\n    ariaLabel: 'Share on Mix',\n    icon: ['fab', 'mix'],\n    color: '#eb4924',\n    share: {\n      desktop: 'https://mix.com/add?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  viber: {\n    type: 'viber',\n    text: 'Viber',\n    ariaLabel: 'Share on Viber',\n    icon: ['fab', 'viber'],\n    color: '#665ca7',\n    share: {\n      android: 'viber://forward?',\n      ios: 'viber://forward?'\n    },\n    params: {\n      description: 'text'\n    },\n    paramsFunc: linkInDescription\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    ariaLabel: 'Share on VKontakte',\n    icon: ['fab', 'vk'],\n    color: '#4C75A3',\n    share: {\n      desktop: 'https://vk.com/share.php?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    ariaLabel: 'Share on Telegram',\n    icon: ['fab', 'telegram-plane'],\n    color: '#0088cc',\n    share: {\n      desktop: 'https://t.me/share/url?'\n    },\n    params: {\n      url: 'url',\n      description: 'text'\n    }\n  },\n  messenger: {\n    type: 'messenger',\n    text: 'Messenger',\n    ariaLabel: 'Share on Messenger',\n    icon: ['fab', 'facebook-messenger'],\n    color: '#0080FF',\n    share: {\n      android: 'fb-messenger://share/?',\n      ios: 'fb-messenger://share/?'\n    },\n    params: {\n      url: 'link'\n    }\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    ariaLabel: 'Share on WhatsApp',\n    icon: ['fab', 'whatsapp'],\n    color: '#25D366',\n    share: {\n      desktop: 'https://web.whatsapp.com/send?',\n      android: 'whatsapp://send?',\n      ios: 'https://api.whatsapp.com/send?'\n    },\n    params: {\n      description: 'text'\n    },\n    paramsFunc: linkInDescription\n  },\n  xing: {\n    type: 'xing',\n    text: 'Xing',\n    ariaLabel: 'Share on Xing',\n    icon: ['fab', 'xing'],\n    color: '#006567',\n    share: {\n      desktop: 'https://www.xing.com/spi/shares/new?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  line: {\n    type: 'line',\n    text: 'Line',\n    ariaLabel: 'Share on Line',\n    icon: ['fab', 'line'],\n    color: '#00b900',\n    share: {\n      desktop: 'https://social-plugins.line.me/lineit/share?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  sms: {\n    type: 'sms',\n    text: 'SMS',\n    ariaLabel: 'Share link via SMS',\n    icon: ['fas', 'sms'],\n    color: '#20c16c',\n    share: {\n      desktop: 'sms:?',\n      ios: 'sms:&'\n    },\n    params: {\n      description: 'body'\n    },\n    paramsFunc: linkInDescription\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    ariaLabel: 'Share link via email',\n    icon: ['fas', 'envelope'],\n    color: '#FF961C',\n    share: {\n      desktop: 'mailto:?'\n    },\n    params: {\n      title: 'subject',\n      description: 'body'\n    },\n    paramsFunc: linkInDescription\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    ariaLabel: 'Print page',\n    icon: ['fas', 'print'],\n    color: '#765AA2',\n    func: printPage\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    ariaLabel: 'Copy link',\n    icon: ['fas', 'link'],\n    color: '#607D8B',\n    data: {\n      text: 'Copy link',\n      icon: ['fas', 'link'],\n      successText: 'Copied',\n      successIcon: ['fas', 'check'],\n      delay: 2000\n    },\n    func: copyToClipboard\n  }\n};\nclass ShareService {\n  constructor(config, _document) {\n    this._document = _document;\n    /** Global config that applies on all share buttons in the app */\n    this.config = {\n      sharerMethod: SharerMethod.Anchor,\n      sharerTarget: '_blank',\n      windowObj: this._document.defaultView,\n      windowFuncName: 'open',\n      prop: SHARE_BUTTONS,\n      theme: 'default',\n      include: [],\n      exclude: [],\n      autoSetMeta: true,\n      windowWidth: 800,\n      windowHeight: 500,\n      moreButtonIcon: 'ellipsis-h',\n      lessButtonIcon: 'minus',\n      moreButtonAriaLabel: 'Show more share buttons',\n      lessButtonAriaLabel: 'Show less share buttons'\n    };\n    /** Stream that emits when config changes */\n    this.config$ = new BehaviorSubject(this.config);\n    if (config) {\n      this.setConfig(config);\n    }\n  }\n  /**\r\n   * Share buttons properties, used to get the text, color and icon of each button.\r\n   */\n  get prop() {\n    return this.config.prop;\n  }\n  get windowSize() {\n    return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;\n  }\n  setConfig(config) {\n    this.config = mergeDeep(this.config, config);\n    this.config$.next(this.config);\n  }\n  addButton(name, props) {\n    this.setConfig({\n      prop: {\n        [name]: props\n      }\n    });\n  }\n}\nShareService.ɵfac = function ShareService_Factory(t) {\n  return new (t || ShareService)(i0.ɵɵinject(SHARE_BUTTONS_CONFIG, 8), i0.ɵɵinject(DOCUMENT));\n};\nShareService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ShareService,\n  factory: ShareService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ShareService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SHARE_BUTTONS_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\nclass ShareDirective {\n  constructor(_el, _meta, _platform, _clipboard, _share, _cd, _document) {\n    this._meta = _meta;\n    this._platform = _platform;\n    this._clipboard = _clipboard;\n    this._share = _share;\n    this._cd = _cd;\n    this._document = _document;\n    /** Stream that emits when button is destroyed */\n    this._destroyed = new Subject();\n    /** Stream that emit when share button need to be updated */\n    this._updater = new Subject();\n    /** Set meta tags from document head, useful when SEO is supported */\n    this.autoSetMeta = this._share.config.autoSetMeta;\n    /** Sharing link */\n    this.url = this._share.config.url;\n    /** Sets the title parameter */\n    this.title = this._share.config.title;\n    /** Sets the description parameter */\n    this.description = this._share.config.description;\n    /** Sets the image parameter for sharing on Pinterest */\n    this.image = this._share.config.image;\n    /** Sets the tags parameter for sharing on Twitter and Tumblr */\n    this.tags = this._share.config.tags;\n    /** Stream that emits when share dialog is opened */\n    this.opened = new EventEmitter();\n    /** Stream that emits when share dialog is closed */\n    this.closed = new EventEmitter();\n    this._el = _el.nativeElement;\n  }\n  /**\r\n   * Share the link\r\n   */\n  share() {\n    // Avoid SSR error\n    if (this._platform.isBrowser && this.shareButton) {\n      // Prepare sharer url params\n      const params = this.autoSetMeta ? this.getParamsFromMetaTags() : this.getParamsFromInputs();\n      // Prepare share button click\n      const click = this.shareButton.share ? this.open(params) : this.shareButton.func({\n        params,\n        data: this.shareButton.data,\n        clipboard: this._clipboard,\n        updater: this._updater\n      });\n      click.pipe(takeUntil(this._destroyed)).subscribe();\n    } else {\n      console.warn(`${this.text} button is not compatible on this Platform`);\n    }\n  }\n  ngOnInit() {\n    // This stream is mainly used to update the copy button text and icon when it is being clicked\n    this._updater.pipe(tap(data => {\n      this.icon = data.icon;\n      this.text = data.text;\n      this._el.style.pointerEvents = data.disabled ? 'none' : 'auto';\n      this._cd.markForCheck();\n    }), takeUntil(this._destroyed)).subscribe();\n  }\n  ngOnChanges(changes) {\n    // Avoid SSR error\n    if (this._platform.isBrowser) {\n      // Create share button\n      if (this._shareButtonChanged(changes.shareButtonName)) {\n        this._createShareButton();\n      }\n      // Prepare share url\n      if (this._urlChanged(changes.url)) {\n        this.url = getValidUrl(this.autoSetMeta ? this.url || this._getMetaTagContent('og:url') : this.url, this._document.defaultView.location.href);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  _createShareButton() {\n    const button = this._share.config.prop[this.shareButtonName];\n    if (button) {\n      // Set share button properties\n      this.shareButton = button;\n      // Remove previous button class\n      this._el.classList.remove(`sb-${this._buttonClass}`);\n      // Add new button class\n      this._el.classList.add(`sb-${this.shareButtonName}`);\n      // Set button css color variable\n      this._el.style.setProperty('--button-color', this.shareButton.color);\n      // Keep a copy of the class for future replacement\n      this._buttonClass = this.shareButtonName;\n      this.color = this.shareButton.color;\n      this.text = this.shareButton.text;\n      this.icon = this.shareButton.icon;\n      // Set aria-label attribute\n      this._el.setAttribute('aria-label', button.ariaLabel);\n    } else {\n      console.error(`[ShareButtons]: The share button '${this.shareButtonName}' does not exist!`);\n    }\n  }\n  /**\r\n   * Get meta tag content\r\n   */\n  _getMetaTagContent(key) {\n    const metaUsingProperty = this._meta.getTag(`property=\"${key}\"`);\n    if (metaUsingProperty) {\n      return metaUsingProperty.getAttribute('content');\n    }\n    const metaUsingName = this._meta.getTag(`name=\"${key}\"`);\n    if (metaUsingName) {\n      return metaUsingName.getAttribute('content');\n    }\n  }\n  _shareButtonChanged(change) {\n    return change && (change.firstChange || change.previousValue !== change.currentValue);\n  }\n  _urlChanged(change) {\n    return !this.url || change && change.previousValue !== change.currentValue;\n  }\n  /**\r\n   * Get share params from meta tags first and fallback to user inputs\r\n   */\n  getParamsFromMetaTags() {\n    return {\n      url: this.url,\n      title: this.title || this._getMetaTagContent('og:title'),\n      description: this.description || this._getMetaTagContent('og:description'),\n      image: this.image || this._getMetaTagContent('og:image'),\n      via: this._share.config.twitterAccount,\n      tags: this.tags\n    };\n  }\n  /**\r\n   * Get share params from user inputs\r\n   */\n  getParamsFromInputs() {\n    return {\n      url: this.url,\n      title: this.title,\n      description: this.description,\n      image: this.image,\n      tags: this.tags,\n      via: this._share.config.twitterAccount\n    };\n  }\n  open(params) {\n    // Set sharer link based on user's device\n    let sharerLink;\n    if (this._platform.IOS && this.shareButton.share.ios) {\n      sharerLink = this.shareButton.share.ios;\n    } else if (this._platform.ANDROID && this.shareButton.share.android) {\n      sharerLink = this.shareButton.share.android;\n    } else {\n      sharerLink = this.shareButton.share.desktop;\n    }\n    if (sharerLink) {\n      // Set sharer link params\n      this._finalUrl = sharerLink + this._serializeParams(params);\n      // Log the sharer link in debug mode\n      if (this._share.config.debug) {\n        console.log('[DEBUG SHARE BUTTON]: ', this._finalUrl);\n      }\n      // Open the share window\n      // There are two methods available for opening the share window:\n      // 1. Using a real anchor\n      // 2. Using window.open\n      const sharerMethod = this.shareButton.method || this._share.config.sharerMethod;\n      const sharerTarget = this.shareButton.target || this._share.config.sharerTarget;\n      switch (sharerMethod) {\n        case SharerMethod.Anchor:\n          const linkElement = this._document.createElement('a');\n          // Make it open in a new tab/window (depends on user's browser configuration)\n          linkElement.setAttribute('target', sharerTarget);\n          // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n          linkElement.setAttribute('rel', 'noopener noreferrer');\n          linkElement.href = this._finalUrl;\n          linkElement.click();\n          linkElement.remove();\n          break;\n        case SharerMethod.Window:\n          // Open link using Window object\n          const openWindow = this._share.config.windowObj[this._share.config.windowFuncName];\n          const popUpWindow = openWindow(this._finalUrl, sharerTarget, this._share.windowSize);\n          // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n          this._share.config.windowObj.opener = null;\n          // Resolve when share dialog is closed\n          if (popUpWindow) {\n            return new Observable(sub => {\n              const pollTimer = this._document.defaultView.setInterval(() => {\n                if (popUpWindow.closed) {\n                  this._document.defaultView.clearInterval(pollTimer);\n                  // Emit when share windows is closed\n                  this.closed.emit(this.shareButtonName);\n                  sub.next();\n                  sub.complete();\n                }\n              }, 200);\n            });\n          }\n          break;\n      }\n      // Emit when share window is opened\n      this.opened.emit(this.shareButtonName);\n    }\n    return EMPTY;\n  }\n  _serializeParams(params) {\n    return Object.entries(this.shareButton.params).map(([key, value]) => {\n      // Check if share button param has a map function\n      const paramFunc = this.shareButton.paramsFunc ? this.shareButton.paramsFunc[key] : null;\n      if (params[key] || paramFunc) {\n        const paramValue = paramFunc ? paramFunc(params) : params[key];\n        return `${value}=${encodeURIComponent(paramValue)}`;\n      }\n      return '';\n    }).filter(urlParam => urlParam !== '').join('&');\n  }\n}\nShareDirective.ɵfac = function ShareDirective_Factory(t) {\n  return new (t || ShareDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Meta), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i3.Clipboard), i0.ɵɵdirectiveInject(ShareService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n};\nShareDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ShareDirective,\n  selectors: [[\"\", \"shareButton\", \"\"]],\n  hostBindings: function ShareDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function ShareDirective_click_HostBindingHandler() {\n        return ctx.share();\n      });\n    }\n  },\n  inputs: {\n    shareButtonName: [\"shareButton\", \"shareButtonName\"],\n    autoSetMeta: \"autoSetMeta\",\n    url: \"url\",\n    title: \"title\",\n    description: \"description\",\n    image: \"image\",\n    tags: \"tags\"\n  },\n  outputs: {\n    opened: \"opened\",\n    closed: \"closed\"\n  },\n  exportAs: [\"shareButton\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ShareDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[shareButton]',\n      exportAs: 'shareButton'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Meta\n    }, {\n      type: i2.Platform\n    }, {\n      type: i3.Clipboard\n    }, {\n      type: ShareService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    shareButtonName: [{\n      type: Input,\n      args: ['shareButton']\n    }],\n    autoSetMeta: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    description: [{\n      type: Input\n    }],\n    image: [{\n      type: Input\n    }],\n    tags: [{\n      type: Input\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    share: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\nclass ShareModule {\n  static withConfig(config) {\n    return {\n      ngModule: ShareModule,\n      providers: [{\n        provide: SHARE_BUTTONS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n}\nShareModule.ɵfac = function ShareModule_Factory(t) {\n  return new (t || ShareModule)();\n};\nShareModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ShareModule\n});\nShareModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [PlatformModule, ClipboardModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ShareModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule, ClipboardModule],\n      declarations: [ShareDirective],\n      exports: [ShareDirective]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { IShareButton, SHARE_BUTTONS, SHARE_BUTTONS_CONFIG, ShareDirective, ShareModule, ShareService, SharerMethod };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Optional","Inject","EventEmitter","Directive","Input","Output","HostListener","NgModule","i2","PlatformModule","i3","ClipboardModule","DOCUMENT","Observable","of","BehaviorSubject","Subject","EMPTY","tap","delay","take","takeUntil","i1","SHARE_BUTTONS_CONFIG","IShareButton","SharerMethod","isObject","item","Array","isArray","mergeDeep","target","sources","length","source","shift","key","Object","assign","getValidUrl","url","fallbackUrl","r","test","console","warn","printPage","sub","document","defaultView","print","copyToClipboard","params","data","clipboard","updater","pipe","copy","next","icon","successIcon","text","successText","disabled","linkInDescription","description","p","SHARE_BUTTONS","facebook","type","ariaLabel","color","share","desktop","twitter","tags","via","linkedin","title","pinterest","image","reddit","tumblr","mix","viber","android","ios","paramsFunc","vk","telegram","messenger","whatsapp","xing","line","sms","email","func","ShareService","constructor","config","_document","sharerMethod","Anchor","sharerTarget","windowObj","windowFuncName","prop","theme","include","exclude","autoSetMeta","windowWidth","windowHeight","moreButtonIcon","lessButtonIcon","moreButtonAriaLabel","lessButtonAriaLabel","config$","setConfig","windowSize","addButton","name","props","ɵfac","ɵprov","args","providedIn","undefined","decorators","ShareDirective","_el","_meta","_platform","_clipboard","_share","_cd","_destroyed","_updater","opened","closed","nativeElement","isBrowser","shareButton","getParamsFromMetaTags","getParamsFromInputs","click","open","subscribe","ngOnInit","style","pointerEvents","markForCheck","ngOnChanges","changes","_shareButtonChanged","shareButtonName","_createShareButton","_urlChanged","_getMetaTagContent","location","href","ngOnDestroy","complete","button","classList","remove","_buttonClass","add","setProperty","setAttribute","error","metaUsingProperty","getTag","getAttribute","metaUsingName","change","firstChange","previousValue","currentValue","twitterAccount","sharerLink","IOS","ANDROID","_finalUrl","_serializeParams","debug","log","method","linkElement","createElement","Window","openWindow","popUpWindow","opener","pollTimer","setInterval","clearInterval","emit","entries","map","value","paramFunc","paramValue","encodeURIComponent","filter","urlParam","join","ElementRef","Meta","Platform","Clipboard","ChangeDetectorRef","ɵdir","selector","exportAs","ShareModule","withConfig","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/Margulan/Desktop/gg/KBTU/2-course/4/Web/Lab5/shop/node_modules/ngx-sharebuttons/fesm2020/ngx-sharebuttons.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\r\nimport * as i2 from '@angular/cdk/platform';\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport * as i3 from '@angular/cdk/clipboard';\r\nimport { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Observable, of, BehaviorSubject, Subject, EMPTY } from 'rxjs';\r\nimport { tap, delay, take, takeUntil } from 'rxjs/operators';\r\nimport * as i1 from '@angular/platform-browser';\r\n\r\nconst SHARE_BUTTONS_CONFIG = new InjectionToken('shareButtonsConfig');\r\nclass IShareButton {\r\n}\r\nvar SharerMethod;\r\n(function (SharerMethod) {\r\n    SharerMethod[\"Anchor\"] = \"anchor\";\r\n    SharerMethod[\"Window\"] = \"window\";\r\n})(SharerMethod || (SharerMethod = {}));\r\n\r\n/**\r\n * Simple object check.\r\n */\r\nfunction isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n/**\r\n * Deep merge two objects.\r\n */\r\nfunction mergeDeep(target, ...sources) {\r\n    if (!sources.length) {\r\n        return target;\r\n    }\r\n    const source = sources.shift();\r\n    if (isObject(target) && isObject(source)) {\r\n        for (const key in source) {\r\n            if (isObject(source[key])) {\r\n                if (!target[key]) {\r\n                    Object.assign(target, { [key]: {} });\r\n                }\r\n                mergeDeep(target[key], source[key]);\r\n            }\r\n            else {\r\n                Object.assign(target, { [key]: source[key] });\r\n            }\r\n        }\r\n    }\r\n    return mergeDeep(target, ...sources);\r\n}\r\n/** Returns a valid URL or falls back to current URL */\r\nfunction getValidUrl(url, fallbackUrl) {\r\n    if (url) {\r\n        const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n        if (r.test(url)) {\r\n            return url;\r\n        }\r\n        console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\r\n    }\r\n    return fallbackUrl;\r\n}\r\nfunction printPage() {\r\n    return new Observable((sub) => document.defaultView.print());\r\n}\r\nfunction copyToClipboard({ params, data, clipboard, updater }) {\r\n    return of(null).pipe(tap(() => {\r\n        clipboard.copy(params.url);\r\n        // Disable copy button\r\n        updater.next({ icon: data.successIcon, text: data.successText, disabled: true });\r\n    }), delay(data.delay), tap(() => updater.next({ icon: data.icon, text: data.text, disabled: false })), take(1));\r\n}\r\n\r\n// Create message body that includes the sharing link used for Email, SMS and WhatsApp buttons\r\nconst linkInDescription = {\r\n    description: (p) => {\r\n        return p.description ? `${p.description}\\r\\n${p.url}` : p.url;\r\n    }\r\n};\r\nconst SHARE_BUTTONS = {\r\n    facebook: {\r\n        type: 'facebook',\r\n        text: 'Facebook',\r\n        ariaLabel: 'Share on Facebook',\r\n        icon: ['fab', 'facebook-f'],\r\n        color: '#4267B2',\r\n        share: {\r\n            desktop: 'https://www.facebook.com/sharer/sharer.php?'\r\n        },\r\n        params: {\r\n            url: 'u'\r\n        }\r\n    },\r\n    twitter: {\r\n        type: 'twitter',\r\n        text: 'Twitter',\r\n        ariaLabel: 'Share on Twitter',\r\n        icon: ['fab', 'twitter'],\r\n        color: '#00acee',\r\n        share: {\r\n            desktop: 'https://twitter.com/intent/tweet?'\r\n        },\r\n        params: {\r\n            url: 'url',\r\n            description: 'text',\r\n            tags: 'hashtags',\r\n            via: 'via'\r\n        }\r\n    },\r\n    linkedin: {\r\n        type: 'linkedin',\r\n        text: 'LinkedIn',\r\n        ariaLabel: 'Share on LinkedIn',\r\n        icon: ['fab', 'linkedin-in'],\r\n        color: '#006fa6',\r\n        share: {\r\n            desktop: 'https://www.linkedin.com/shareArticle?'\r\n        },\r\n        params: {\r\n            url: 'url',\r\n            title: 'title',\r\n            description: 'summary'\r\n        }\r\n    },\r\n    pinterest: {\r\n        type: 'pinterest',\r\n        text: 'Pinterest',\r\n        ariaLabel: 'Share on Pinterest',\r\n        icon: ['fab', 'pinterest-p'],\r\n        color: '#BD091D',\r\n        share: {\r\n            desktop: 'https://pinterest.com/pin/create/button/?'\r\n        },\r\n        params: {\r\n            url: 'url',\r\n            description: 'description',\r\n            image: 'media'\r\n        }\r\n    },\r\n    reddit: {\r\n        type: 'reddit',\r\n        text: 'Reddit',\r\n        ariaLabel: 'Share on Reddit',\r\n        icon: ['fab', 'reddit-alien'],\r\n        color: '#FF4006',\r\n        share: {\r\n            desktop: 'https://www.reddit.com/submit?'\r\n        },\r\n        params: {\r\n            url: 'url',\r\n            title: 'title'\r\n        }\r\n    },\r\n    tumblr: {\r\n        type: 'tumblr',\r\n        text: 'Tumblr',\r\n        ariaLabel: 'Share on Tumblr',\r\n        icon: ['fab', 'tumblr'],\r\n        color: '#36465D',\r\n        share: {\r\n            desktop: 'https://tumblr.com/widgets/share/tool?'\r\n        },\r\n        params: {\r\n            url: 'canonicalUrl',\r\n            description: 'caption',\r\n            tags: 'tags'\r\n        }\r\n    },\r\n    mix: {\r\n        type: 'mix',\r\n        text: 'Mix',\r\n        ariaLabel: 'Share on Mix',\r\n        icon: ['fab', 'mix'],\r\n        color: '#eb4924',\r\n        share: {\r\n            desktop: 'https://mix.com/add?'\r\n        },\r\n        params: {\r\n            url: 'url'\r\n        }\r\n    },\r\n    viber: {\r\n        type: 'viber',\r\n        text: 'Viber',\r\n        ariaLabel: 'Share on Viber',\r\n        icon: ['fab', 'viber'],\r\n        color: '#665ca7',\r\n        share: {\r\n            android: 'viber://forward?',\r\n            ios: 'viber://forward?'\r\n        },\r\n        params: {\r\n            description: 'text'\r\n        },\r\n        paramsFunc: linkInDescription\r\n    },\r\n    vk: {\r\n        type: 'vk',\r\n        text: 'VKontakte',\r\n        ariaLabel: 'Share on VKontakte',\r\n        icon: ['fab', 'vk'],\r\n        color: '#4C75A3',\r\n        share: {\r\n            desktop: 'https://vk.com/share.php?'\r\n        },\r\n        params: {\r\n            url: 'url'\r\n        }\r\n    },\r\n    telegram: {\r\n        type: 'telegram',\r\n        text: 'Telegram',\r\n        ariaLabel: 'Share on Telegram',\r\n        icon: ['fab', 'telegram-plane'],\r\n        color: '#0088cc',\r\n        share: {\r\n            desktop: 'https://t.me/share/url?'\r\n        },\r\n        params: {\r\n            url: 'url',\r\n            description: 'text'\r\n        }\r\n    },\r\n    messenger: {\r\n        type: 'messenger',\r\n        text: 'Messenger',\r\n        ariaLabel: 'Share on Messenger',\r\n        icon: ['fab', 'facebook-messenger'],\r\n        color: '#0080FF',\r\n        share: {\r\n            android: 'fb-messenger://share/?',\r\n            ios: 'fb-messenger://share/?'\r\n        },\r\n        params: {\r\n            url: 'link'\r\n        }\r\n    },\r\n    whatsapp: {\r\n        type: 'whatsapp',\r\n        text: 'WhatsApp',\r\n        ariaLabel: 'Share on WhatsApp',\r\n        icon: ['fab', 'whatsapp'],\r\n        color: '#25D366',\r\n        share: {\r\n            desktop: 'https://web.whatsapp.com/send?',\r\n            android: 'whatsapp://send?',\r\n            ios: 'https://api.whatsapp.com/send?'\r\n        },\r\n        params: {\r\n            description: 'text'\r\n        },\r\n        paramsFunc: linkInDescription\r\n    },\r\n    xing: {\r\n        type: 'xing',\r\n        text: 'Xing',\r\n        ariaLabel: 'Share on Xing',\r\n        icon: ['fab', 'xing'],\r\n        color: '#006567',\r\n        share: {\r\n            desktop: 'https://www.xing.com/spi/shares/new?'\r\n        },\r\n        params: {\r\n            url: 'url'\r\n        }\r\n    },\r\n    line: {\r\n        type: 'line',\r\n        text: 'Line',\r\n        ariaLabel: 'Share on Line',\r\n        icon: ['fab', 'line'],\r\n        color: '#00b900',\r\n        share: {\r\n            desktop: 'https://social-plugins.line.me/lineit/share?'\r\n        },\r\n        params: {\r\n            url: 'url'\r\n        }\r\n    },\r\n    sms: {\r\n        type: 'sms',\r\n        text: 'SMS',\r\n        ariaLabel: 'Share link via SMS',\r\n        icon: ['fas', 'sms'],\r\n        color: '#20c16c',\r\n        share: {\r\n            desktop: 'sms:?',\r\n            ios: 'sms:&'\r\n        },\r\n        params: {\r\n            description: 'body'\r\n        },\r\n        paramsFunc: linkInDescription\r\n    },\r\n    email: {\r\n        type: 'email',\r\n        text: 'Email',\r\n        ariaLabel: 'Share link via email',\r\n        icon: ['fas', 'envelope'],\r\n        color: '#FF961C',\r\n        share: {\r\n            desktop: 'mailto:?'\r\n        },\r\n        params: {\r\n            title: 'subject',\r\n            description: 'body'\r\n        },\r\n        paramsFunc: linkInDescription\r\n    },\r\n    print: {\r\n        type: 'print',\r\n        text: 'Print',\r\n        ariaLabel: 'Print page',\r\n        icon: ['fas', 'print'],\r\n        color: '#765AA2',\r\n        func: printPage\r\n    },\r\n    copy: {\r\n        type: 'copy',\r\n        text: 'Copy link',\r\n        ariaLabel: 'Copy link',\r\n        icon: ['fas', 'link'],\r\n        color: '#607D8B',\r\n        data: {\r\n            text: 'Copy link',\r\n            icon: ['fas', 'link'],\r\n            successText: 'Copied',\r\n            successIcon: ['fas', 'check'],\r\n            delay: 2000\r\n        },\r\n        func: copyToClipboard\r\n    }\r\n};\r\n\r\nclass ShareService {\r\n    constructor(config, _document) {\r\n        this._document = _document;\r\n        /** Global config that applies on all share buttons in the app */\r\n        this.config = {\r\n            sharerMethod: SharerMethod.Anchor,\r\n            sharerTarget: '_blank',\r\n            windowObj: this._document.defaultView,\r\n            windowFuncName: 'open',\r\n            prop: SHARE_BUTTONS,\r\n            theme: 'default',\r\n            include: [],\r\n            exclude: [],\r\n            autoSetMeta: true,\r\n            windowWidth: 800,\r\n            windowHeight: 500,\r\n            moreButtonIcon: 'ellipsis-h',\r\n            lessButtonIcon: 'minus',\r\n            moreButtonAriaLabel: 'Show more share buttons',\r\n            lessButtonAriaLabel: 'Show less share buttons'\r\n        };\r\n        /** Stream that emits when config changes */\r\n        this.config$ = new BehaviorSubject(this.config);\r\n        if (config) {\r\n            this.setConfig(config);\r\n        }\r\n    }\r\n    /**\r\n     * Share buttons properties, used to get the text, color and icon of each button.\r\n     */\r\n    get prop() {\r\n        return this.config.prop;\r\n    }\r\n    get windowSize() {\r\n        return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;\r\n    }\r\n    setConfig(config) {\r\n        this.config = mergeDeep(this.config, config);\r\n        this.config$.next(this.config);\r\n    }\r\n    addButton(name, props) {\r\n        this.setConfig({\r\n            prop: {\r\n                [name]: props\r\n            }\r\n        });\r\n    }\r\n}\r\nShareService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareService, deps: [{ token: SHARE_BUTTONS_CONFIG, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\r\nShareService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareService, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareService, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [SHARE_BUTTONS_CONFIG]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\r\n\r\nclass ShareDirective {\r\n    constructor(_el, _meta, _platform, _clipboard, _share, _cd, _document) {\r\n        this._meta = _meta;\r\n        this._platform = _platform;\r\n        this._clipboard = _clipboard;\r\n        this._share = _share;\r\n        this._cd = _cd;\r\n        this._document = _document;\r\n        /** Stream that emits when button is destroyed */\r\n        this._destroyed = new Subject();\r\n        /** Stream that emit when share button need to be updated */\r\n        this._updater = new Subject();\r\n        /** Set meta tags from document head, useful when SEO is supported */\r\n        this.autoSetMeta = this._share.config.autoSetMeta;\r\n        /** Sharing link */\r\n        this.url = this._share.config.url;\r\n        /** Sets the title parameter */\r\n        this.title = this._share.config.title;\r\n        /** Sets the description parameter */\r\n        this.description = this._share.config.description;\r\n        /** Sets the image parameter for sharing on Pinterest */\r\n        this.image = this._share.config.image;\r\n        /** Sets the tags parameter for sharing on Twitter and Tumblr */\r\n        this.tags = this._share.config.tags;\r\n        /** Stream that emits when share dialog is opened */\r\n        this.opened = new EventEmitter();\r\n        /** Stream that emits when share dialog is closed */\r\n        this.closed = new EventEmitter();\r\n        this._el = _el.nativeElement;\r\n    }\r\n    /**\r\n     * Share the link\r\n     */\r\n    share() {\r\n        // Avoid SSR error\r\n        if (this._platform.isBrowser && this.shareButton) {\r\n            // Prepare sharer url params\r\n            const params = this.autoSetMeta ? this.getParamsFromMetaTags() : this.getParamsFromInputs();\r\n            // Prepare share button click\r\n            const click = this.shareButton.share ? this.open(params) : this.shareButton.func({\r\n                params,\r\n                data: this.shareButton.data,\r\n                clipboard: this._clipboard,\r\n                updater: this._updater\r\n            });\r\n            click.pipe(takeUntil(this._destroyed)).subscribe();\r\n        }\r\n        else {\r\n            console.warn(`${this.text} button is not compatible on this Platform`);\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        // This stream is mainly used to update the copy button text and icon when it is being clicked\r\n        this._updater.pipe(tap((data) => {\r\n            this.icon = data.icon;\r\n            this.text = data.text;\r\n            this._el.style.pointerEvents = data.disabled ? 'none' : 'auto';\r\n            this._cd.markForCheck();\r\n        }), takeUntil(this._destroyed)).subscribe();\r\n    }\r\n    ngOnChanges(changes) {\r\n        // Avoid SSR error\r\n        if (this._platform.isBrowser) {\r\n            // Create share button\r\n            if (this._shareButtonChanged(changes.shareButtonName)) {\r\n                this._createShareButton();\r\n            }\r\n            // Prepare share url\r\n            if (this._urlChanged(changes.url)) {\r\n                this.url = getValidUrl(this.autoSetMeta\r\n                    ? this.url || this._getMetaTagContent('og:url')\r\n                    : this.url, this._document.defaultView.location.href);\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    _createShareButton() {\r\n        const button = this._share.config.prop[this.shareButtonName];\r\n        if (button) {\r\n            // Set share button properties\r\n            this.shareButton = button;\r\n            // Remove previous button class\r\n            this._el.classList.remove(`sb-${this._buttonClass}`);\r\n            // Add new button class\r\n            this._el.classList.add(`sb-${this.shareButtonName}`);\r\n            // Set button css color variable\r\n            this._el.style.setProperty('--button-color', this.shareButton.color);\r\n            // Keep a copy of the class for future replacement\r\n            this._buttonClass = this.shareButtonName;\r\n            this.color = this.shareButton.color;\r\n            this.text = this.shareButton.text;\r\n            this.icon = this.shareButton.icon;\r\n            // Set aria-label attribute\r\n            this._el.setAttribute('aria-label', button.ariaLabel);\r\n        }\r\n        else {\r\n            console.error(`[ShareButtons]: The share button '${this.shareButtonName}' does not exist!`);\r\n        }\r\n    }\r\n    /**\r\n     * Get meta tag content\r\n     */\r\n    _getMetaTagContent(key) {\r\n        const metaUsingProperty = this._meta.getTag(`property=\"${key}\"`);\r\n        if (metaUsingProperty) {\r\n            return metaUsingProperty.getAttribute('content');\r\n        }\r\n        const metaUsingName = this._meta.getTag(`name=\"${key}\"`);\r\n        if (metaUsingName) {\r\n            return metaUsingName.getAttribute('content');\r\n        }\r\n    }\r\n    _shareButtonChanged(change) {\r\n        return change && (change.firstChange || change.previousValue !== change.currentValue);\r\n    }\r\n    _urlChanged(change) {\r\n        return !this.url || (change && change.previousValue !== change.currentValue);\r\n    }\r\n    /**\r\n     * Get share params from meta tags first and fallback to user inputs\r\n     */\r\n    getParamsFromMetaTags() {\r\n        return {\r\n            url: this.url,\r\n            title: this.title || this._getMetaTagContent('og:title'),\r\n            description: this.description || this._getMetaTagContent('og:description'),\r\n            image: this.image || this._getMetaTagContent('og:image'),\r\n            via: this._share.config.twitterAccount,\r\n            tags: this.tags\r\n        };\r\n    }\r\n    /**\r\n     * Get share params from user inputs\r\n     */\r\n    getParamsFromInputs() {\r\n        return {\r\n            url: this.url,\r\n            title: this.title,\r\n            description: this.description,\r\n            image: this.image,\r\n            tags: this.tags,\r\n            via: this._share.config.twitterAccount,\r\n        };\r\n    }\r\n    open(params) {\r\n        // Set sharer link based on user's device\r\n        let sharerLink;\r\n        if (this._platform.IOS && this.shareButton.share.ios) {\r\n            sharerLink = this.shareButton.share.ios;\r\n        }\r\n        else if (this._platform.ANDROID && this.shareButton.share.android) {\r\n            sharerLink = this.shareButton.share.android;\r\n        }\r\n        else {\r\n            sharerLink = this.shareButton.share.desktop;\r\n        }\r\n        if (sharerLink) {\r\n            // Set sharer link params\r\n            this._finalUrl = sharerLink + this._serializeParams(params);\r\n            // Log the sharer link in debug mode\r\n            if (this._share.config.debug) {\r\n                console.log('[DEBUG SHARE BUTTON]: ', this._finalUrl);\r\n            }\r\n            // Open the share window\r\n            // There are two methods available for opening the share window:\r\n            // 1. Using a real anchor\r\n            // 2. Using window.open\r\n            const sharerMethod = this.shareButton.method || this._share.config.sharerMethod;\r\n            const sharerTarget = this.shareButton.target || this._share.config.sharerTarget;\r\n            switch (sharerMethod) {\r\n                case SharerMethod.Anchor:\r\n                    const linkElement = this._document.createElement('a');\r\n                    // Make it open in a new tab/window (depends on user's browser configuration)\r\n                    linkElement.setAttribute('target', sharerTarget);\r\n                    // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\r\n                    linkElement.setAttribute('rel', 'noopener noreferrer');\r\n                    linkElement.href = this._finalUrl;\r\n                    linkElement.click();\r\n                    linkElement.remove();\r\n                    break;\r\n                case SharerMethod.Window:\r\n                    // Open link using Window object\r\n                    const openWindow = this._share.config.windowObj[this._share.config.windowFuncName];\r\n                    const popUpWindow = openWindow(this._finalUrl, sharerTarget, this._share.windowSize);\r\n                    // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\r\n                    this._share.config.windowObj.opener = null;\r\n                    // Resolve when share dialog is closed\r\n                    if (popUpWindow) {\r\n                        return new Observable((sub) => {\r\n                            const pollTimer = this._document.defaultView.setInterval(() => {\r\n                                if (popUpWindow.closed) {\r\n                                    this._document.defaultView.clearInterval(pollTimer);\r\n                                    // Emit when share windows is closed\r\n                                    this.closed.emit(this.shareButtonName);\r\n                                    sub.next();\r\n                                    sub.complete();\r\n                                }\r\n                            }, 200);\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n            // Emit when share window is opened\r\n            this.opened.emit(this.shareButtonName);\r\n        }\r\n        return EMPTY;\r\n    }\r\n    _serializeParams(params) {\r\n        return Object.entries(this.shareButton.params)\r\n            .map(([key, value]) => {\r\n            // Check if share button param has a map function\r\n            const paramFunc = this.shareButton.paramsFunc ? this.shareButton.paramsFunc[key] : null;\r\n            if (params[key] || paramFunc) {\r\n                const paramValue = paramFunc ? paramFunc(params) : params[key];\r\n                return `${value}=${encodeURIComponent(paramValue)}`;\r\n            }\r\n            return '';\r\n        })\r\n            .filter(urlParam => urlParam !== '')\r\n            .join('&');\r\n    }\r\n}\r\nShareDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareDirective, deps: [{ token: i0.ElementRef }, { token: i1.Meta }, { token: i2.Platform }, { token: i3.Clipboard }, { token: ShareService }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\r\nShareDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.0\", type: ShareDirective, selector: \"[shareButton]\", inputs: { shareButtonName: [\"shareButton\", \"shareButtonName\"], autoSetMeta: \"autoSetMeta\", url: \"url\", title: \"title\", description: \"description\", image: \"image\", tags: \"tags\" }, outputs: { opened: \"opened\", closed: \"closed\" }, host: { listeners: { \"click\": \"share()\" } }, exportAs: [\"shareButton\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[shareButton]',\r\n                    exportAs: 'shareButton'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Meta }, { type: i2.Platform }, { type: i3.Clipboard }, { type: ShareService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; }, propDecorators: { shareButtonName: [{\r\n                type: Input,\r\n                args: ['shareButton']\r\n            }], autoSetMeta: [{\r\n                type: Input\r\n            }], url: [{\r\n                type: Input\r\n            }], title: [{\r\n                type: Input\r\n            }], description: [{\r\n                type: Input\r\n            }], image: [{\r\n                type: Input\r\n            }], tags: [{\r\n                type: Input\r\n            }], opened: [{\r\n                type: Output\r\n            }], closed: [{\r\n                type: Output\r\n            }], share: [{\r\n                type: HostListener,\r\n                args: ['click']\r\n            }] } });\r\n\r\nclass ShareModule {\r\n    static withConfig(config) {\r\n        return {\r\n            ngModule: ShareModule,\r\n            providers: [\r\n                { provide: SHARE_BUTTONS_CONFIG, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\nShareModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nShareModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareModule, declarations: [ShareDirective], imports: [PlatformModule,\r\n        ClipboardModule], exports: [ShareDirective] });\r\nShareModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareModule, imports: [PlatformModule,\r\n        ClipboardModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.0\", ngImport: i0, type: ShareModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        PlatformModule,\r\n                        ClipboardModule\r\n                    ],\r\n                    declarations: [\r\n                        ShareDirective\r\n                    ],\r\n                    exports: [\r\n                        ShareDirective\r\n                    ]\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { IShareButton, SHARE_BUTTONS, SHARE_BUTTONS_CONFIG, ShareDirective, ShareModule, ShareService, SharerMethod };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}